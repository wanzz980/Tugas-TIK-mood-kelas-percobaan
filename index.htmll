<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mood Kelas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Nunito:wght@400;600;700&display=swap');
        
        body {
            font-family: 'Nunito', sans-serif;
            background-color: #FFF5F7;
            color: #4A5568;
            min-height: 100vh;
            background-image: url("data:image/svg+xml,%3Csvg width='52' height='26' viewBox='0 0 52 26' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ff85a2' fill-opacity='0.1'%3E%3Cpath d='M10 10c0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6h2c0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4 3.314 0 6 2.686 6 6 0 2.21 1.79 4 4 4v2c-3.314 0-6-2.686-6-6 0-2.21-1.79-4-4-4-3.314 0-6-2.686-6-6zm25.464-1.95l8.486 8.486-1.414 1.414-8.486-8.486 1.414-1.414z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
        }
        
        .app-container {
            max-width: 375px;
            margin: 0 auto;
            min-height: 100vh;
            position: relative;
            background-color: #FFF5F7;
            box-shadow: 0 0 20px rgba(255, 133, 162, 0.2);
            border-radius: 20px;
            overflow: hidden;
        }
        
        .btn-primary {
            background-color: #FF85A2;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: 600;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(255, 133, 162, 0.25);
        }
        
        .btn-primary:hover {
            background-color: #FF6B8E;
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background-color: #FFD1DC;
            color: #FF4081;
            padding: 0.75rem 1.5rem;
            border-radius: 9999px;
            font-weight: 600;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(255, 209, 220, 0.25);
        }
        
        .btn-secondary:hover {
            background-color: #FFC1D0;
            transform: translateY(-2px);
        }
        
        .mood-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            background-color: white;
            box-shadow: 0 4px 10px rgba(255, 133, 162, 0.2);
            transition: all 0.3s;
            border: 3px solid transparent;
        }
        
        .mood-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(255, 133, 162, 0.3);
        }
        
        .mood-btn.selected {
            border-color: #FF85A2;
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(255, 133, 162, 0.3);
        }
        
        .mood-emoji {
            font-size: 2rem;
        }
        
        .mood-label {
            font-size: 0.75rem;
            margin-top: 0.25rem;
            font-weight: 600;
        }
        
        .hello-kitty-ears {
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
            width: 60px;
            height: 30px;
            z-index: 10;
        }
        
        .ear {
            position: absolute;
            width: 25px;
            height: 25px;
            background-color: #FF85A2;
            border-radius: 50%;
        }
        
        .ear.left {
            left: 0;
        }
        
        .ear.right {
            right: 0;
        }
        
        .screen {
            display: none;
            padding: 1.5rem;
            min-height: 100vh;
        }
        
        .active {
            display: block;
        }
        
        .alert-banner {
            background-color: #FFEBEE;
            border-left: 4px solid #FF4081;
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 0.5rem;
        }
        
        .mood-count-card {
            background-color: white;
            border-radius: 1rem;
            padding: 1rem;
            box-shadow: 0 4px 10px rgba(255, 133, 162, 0.15);
            margin-bottom: 1rem;
            transition: all 0.3s;
        }
        
        .mood-count-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(255, 133, 162, 0.2);
        }
        
        .student-list {
            max-height: 150px;
            overflow-y: auto;
            padding-right: 0.5rem;
        }
        
        .student-list::-webkit-scrollbar {
            width: 4px;
        }
        
        .student-list::-webkit-scrollbar-thumb {
            background-color: #FFD1DC;
            border-radius: 4px;
        }
        
        .badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .badge-online {
            background-color: #E8F5E9;
            color: #388E3C;
        }
        
        .badge-voted {
            background-color: #E3F2FD;
            color: #1976D2;
        }
        
        .badge-waiting {
            background-color: #FFF8E1;
            color: #FFA000;
        }
        
        .progress-container {
            width: 100%;
            background-color: #f3f3f3;
            border-radius: 9999px;
            height: 8px;
            margin-top: 0.5rem;
        }
        
        .progress-bar {
            height: 8px;
            border-radius: 9999px;
            background-color: #FF85A2;
        }
        
        .empty-state {
            text-align: center;
            padding: 1rem;
            color: #9CA3AF;
        }
        
        .cute-input {
            border: 2px solid #FFD1DC;
            border-radius: 20px;
            padding: 12px 20px;
            transition: all 0.3s;
            background-color: white;
        }
        
        .cute-input:focus {
            outline: none;
            border-color: #FF85A2;
            box-shadow: 0 0 0 3px rgba(255, 133, 162, 0.2);
        }
        
        .floating-hearts {
            position: absolute;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 0;
            overflow: hidden;
        }
        
        .heart {
            position: absolute;
            width: 20px;
            height: 20px;
            background-color: #FFD1DC;
            transform: rotate(45deg);
            opacity: 0.6;
            animation: float 15s linear infinite;
        }
        
        .heart:before,
        .heart:after {
            content: '';
            width: 20px;
            height: 20px;
            background-color: #FFD1DC;
            border-radius: 50%;
            position: absolute;
        }
        
        .heart:before {
            top: -10px;
            left: 0;
        }
        
        .heart:after {
            top: 0;
            left: -10px;
        }
        
        @keyframes float {
            0% {
                transform: rotate(45deg) translateY(0) translateX(0);
                opacity: 0.6;
            }
            100% {
                transform: rotate(45deg) translateY(-100vh) translateX(100px);
                opacity: 0;
            }
        }
        
        .cute-card {
            background-color: white;
            border-radius: 20px;
            padding: 1.5rem;
            box-shadow: 0 8px 20px rgba(255, 133, 162, 0.15);
            position: relative;
            overflow: hidden;
        }
        
        .cute-card:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(to right, #FF85A2, #FFD1DC, #FF85A2);
        }
        
        .cute-select {
            border: 2px solid #FFD1DC;
            border-radius: 20px;
            padding: 10px 15px;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23FF85A2' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 16px;
            padding-right: 40px;
        }
        
        .cute-select:focus {
            outline: none;
            border-color: #FF85A2;
            box-shadow: 0 0 0 3px rgba(255, 133, 162, 0.2);
        }
        
        .sparkle {
            position: absolute;
            width: 20px;
            height: 20px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='%23FFD1DC' stroke='%23FF85A2' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolygon points='12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2'%3E%3C/polygon%3E%3C/svg%3E");
            background-size: contain;
            opacity: 0.8;
            z-index: 1;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Decorative elements -->
        <div class="floating-hearts">
            <div class="heart" style="left: 10%; animation-delay: 0s;"></div>
            <div class="heart" style="left: 30%; animation-delay: 3s;"></div>
            <div class="heart" style="left: 50%; animation-delay: 6s;"></div>
            <div class="heart" style="left: 70%; animation-delay: 9s;"></div>
            <div class="heart" style="left: 90%; animation-delay: 12s;"></div>
        </div>
        
        <div class="sparkle" style="top: 10%; left: 5%;"></div>
        <div class="sparkle" style="top: 20%; right: 10%;"></div>
        <div class="sparkle" style="bottom: 15%; left: 15%;"></div>
        <div class="sparkle" style="bottom: 30%; right: 5%;"></div>
        
        <!-- Login Screen -->
        <div id="login-screen" class="screen active">
            <div class="flex flex-col items-center justify-center min-h-screen relative z-10">
                <div class="relative">
                    <div class="hello-kitty-ears">
                        <div class="ear left"></div>
                        <div class="ear right"></div>
                    </div>
                    <svg class="w-32 h-32" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="50" cy="50" r="45" fill="white" stroke="#FF85A2" stroke-width="2"/>
                        <circle cx="35" cy="40" r="5" fill="#333"/>
                        <circle cx="65" cy="40" r="5" fill="#333"/>
                        <path d="M50 60 Q 60 70 70 60" fill="none" stroke="#333" stroke-width="2" stroke-linecap="round"/>
                        <path d="M30 30 Q 40 25 50 30" fill="none" stroke="#FF85A2" stroke-width="2"/>
                        <path d="M70 30 Q 60 25 50 30" fill="none" stroke="#FF85A2" stroke-width="2"/>
                        <circle cx="35" cy="38" r="1.5" fill="white"/>
                        <circle cx="65" cy="38" r="1.5" fill="white"/>
                    </svg>
                </div>
                <h1 class="text-3xl font-bold text-center mt-4 mb-2 text-pink-500">Mood Kelas</h1>
                <p class="text-center text-pink-400 mb-6">✨ Bagikan perasaanmu hari ini! ✨</p>
                
                <div class="w-full max-w-xs">
                    <div class="mb-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2" for="username">
                            Username
                        </label>
                        <input class="cute-input w-full" id="username" type="text" placeholder="Masukkan username">
                    </div>
                    <div class="mb-6">
                        <label class="block text-gray-700 text-sm font-bold mb-2" for="password">
                            Password
                        </label>
                        <input class="cute-input w-full" id="password" type="password" placeholder="Masukkan password">
                    </div>
                    <div class="flex items-center justify-between mb-6">
                        <button class="btn-primary w-full" id="login-btn">
                            Masuk
                        </button>
                    </div>
                    <div class="text-center">
                        <p class="text-sm">Belum punya akun? <a href="#" id="show-signup" class="text-pink-500 font-bold">Daftar</a></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Signup Screen -->
        <div id="signup-screen" class="screen">
            <div class="flex flex-col items-center justify-center min-h-screen relative z-10">
                <div class="relative">
                    <div class="hello-kitty-ears">
                        <div class="ear left"></div>
                        <div class="ear right"></div>
                    </div>
                    <svg class="w-24 h-24" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="50" cy="50" r="45" fill="white" stroke="#FF85A2" stroke-width="2"/>
                        <circle cx="35" cy="40" r="5" fill="#333"/>
                        <circle cx="65" cy="40" r="5" fill="#333"/>
                        <path d="M40 60 Q 50 70 60 60" fill="none" stroke="#333" stroke-width="2" stroke-linecap="round"/>
                        <path d="M30 30 Q 40 25 50 30" fill="none" stroke="#FF85A2" stroke-width="2"/>
                        <path d="M70 30 Q 60 25 50 30" fill="none" stroke="#FF85A2" stroke-width="2"/>
                        <circle cx="35" cy="38" r="1.5" fill="white"/>
                        <circle cx="65" cy="38" r="1.5" fill="white"/>
                    </svg>
                </div>
                <h1 class="text-2xl font-bold text-center mt-4 mb-2 text-pink-500">Daftar Akun Baru</h1>
                <p class="text-center text-pink-400 mb-6">✨ Bergabunglah dengan kami! ✨</p>
                
                <div class="w-full max-w-xs">
                    <div class="mb-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2" for="new-username">
                            Username
                        </label>
                        <input class="cute-input w-full" id="new-username" type="text" placeholder="Pilih username">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700 text-sm font-bold mb-2" for="new-password">
                            Password
                        </label>
                        <input class="cute-input w-full" id="new-password" type="password" placeholder="Buat password">
                    </div>
                    <div class="mb-6">
                        <label class="block text-gray-700 text-sm font-bold mb-2">
                            Peran
                        </label>
                        <div class="flex space-x-4">
                            <label class="flex items-center">
                                <input type="radio" name="role" value="student" class="form-radio text-pink-500 h-5 w-5" checked>
                                <span class="ml-2">Siswa</span>
                            </label>
                            <label class="flex items-center">
                                <input type="radio" name="role" value="teacher" class="form-radio text-pink-500 h-5 w-5">
                                <span class="ml-2">Guru</span>
                            </label>
                        </div>
                    </div>
                    <div class="flex items-center justify-between mb-6">
                        <button class="btn-primary w-full" id="signup-btn">
                            Daftar
                        </button>
                    </div>
                    <div class="text-center">
                        <p class="text-sm">Sudah punya akun? <a href="#" id="show-login" class="text-pink-500 font-bold">Masuk</a></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Student Screen -->
        <div id="student-screen" class="screen">
            <div class="flex flex-col min-h-screen relative z-10">
                <div class="flex justify-between items-center mb-6">
                    <h1 class="text-2xl font-bold text-pink-500">Mood Kelas</h1>
                    <div class="flex items-center">
                        <span id="student-username" class="mr-2 font-semibold">username</span>
                        <button id="student-logout" class="text-sm text-pink-500">Keluar</button>
                    </div>
                </div>
                
                <div class="cute-card mb-6">
                    <h2 class="text-lg font-bold mb-4 text-center">Bagaimana perasaanmu hari ini?</h2>
                    <div class="grid grid-cols-3 gap-4 mb-6">
                        <button class="mood-btn" data-mood="happy">
                            <span class="mood-emoji">😊</span>
                            <span class="mood-label">Senang</span>
                        </button>
                        <button class="mood-btn" data-mood="sad">
                            <span class="mood-emoji">😢</span>
                            <span class="mood-label">Sedih</span>
                        </button>
                        <button class="mood-btn" data-mood="neutral">
                            <span class="mood-emoji">😐</span>
                            <span class="mood-label">Biasa</span>
                        </button>
                        <button class="mood-btn" data-mood="calm">
                            <span class="mood-emoji">😌</span>
                            <span class="mood-label">Tenang</span>
                        </button>
                        <button class="mood-btn" data-mood="worried">
                            <span class="mood-emoji">😟</span>
                            <span class="mood-label">Khawatir</span>
                        </button>
                        <button class="mood-btn" data-mood="excited">
                            <span class="mood-emoji">🤩</span>
                            <span class="mood-label">Semangat</span>
                        </button>
                    </div>
                </div>
                
                <div class="cute-card mb-6">
                    <h2 class="text-lg font-bold mb-2">Ada saran untuk kelas?</h2>
                    <textarea id="suggestion" class="cute-input w-full" rows="3" placeholder="Tulis saranmu di sini (opsional)..."></textarea>
                </div>
                
                <button id="submit-mood" class="btn-primary w-full mt-auto mb-6" disabled>Kirim Mood</button>
                
                <div id="submission-success" class="hidden bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg mb-6">
                    <p>Terima kasih! Mood kamu sudah terkirim.</p>
                </div>
            </div>
        </div>

        <!-- Teacher Screen -->
        <div id="teacher-screen" class="screen">
            <div class="flex flex-col min-h-screen relative z-10">
                <div class="flex justify-between items-center mb-4">
                    <h1 class="text-2xl font-bold text-pink-500">Dashboard Guru</h1>
                    <div class="flex items-center">
                        <span id="teacher-username" class="mr-2 font-semibold">username</span>
                        <button id="teacher-logout" class="text-sm text-pink-500">Keluar</button>
                    </div>
                </div>
                
                <!-- Real-time Voting Tracker -->
                <div class="cute-card mb-4">
                    <h2 class="text-lg font-bold mb-2">Status Voting Real-time</h2>
                    <div class="flex justify-between items-center mb-2">
                        <div>
                            <span class="font-semibold" id="online-count">0</span> siswa online
                        </div>
                        <div>
                            <span class="font-semibold" id="voted-count">0</span> sudah vote
                        </div>
                    </div>
                    <div class="progress-container">
                        <div class="progress-bar" id="voting-progress" style="width: 0%"></div>
                    </div>
                    <div class="flex justify-between text-xs mt-1">
                        <span>0%</span>
                        <span>100%</span>
                    </div>
                    <div class="mt-3 flex space-x-2">
                        <span class="badge badge-online">Online</span>
                        <span class="badge badge-voted">Sudah Vote</span>
                        <span class="badge badge-waiting">Belum Vote</span>
                    </div>
                </div>
                
                <div id="alert-banner" class="alert-banner hidden">
                    <p class="font-bold">Perhatian!</p>
                    <p>Lebih dari 30% siswa melaporkan mood negatif hari ini.</p>
                </div>
                
                <div class="cute-card mb-4">
                    <h2 class="text-lg font-bold mb-2">Mood Hari Ini</h2>
                    <div class="grid grid-cols-2 gap-3">
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">😊</span>
                                <div>
                                    <p class="font-bold">Senang</p>
                                    <p id="happy-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">😢</span>
                                <div>
                                    <p class="font-bold">Sedih</p>
                                    <p id="sad-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">😐</span>
                                <div>
                                    <p class="font-bold">Biasa</p>
                                    <p id="neutral-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">😌</span>
                                <div>
                                    <p class="font-bold">Tenang</p>
                                    <p id="calm-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">😟</span>
                                <div>
                                    <p class="font-bold">Khawatir</p>
                                    <p id="worried-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                        <div class="mood-count-card">
                            <div class="flex items-center">
                                <span class="text-2xl mr-2">🤩</span>
                                <div>
                                    <p class="font-bold">Semangat</p>
                                    <p id="excited-count">0 siswa</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="cute-card">
                    <h2 class="text-lg font-bold mb-2">Status Siswa</h2>
                    <div class="mb-2">
                        <select id="student-filter" class="cute-select w-full">
                            <option value="all">Semua Siswa</option>
                            <option value="online">Online</option>
                            <option value="voted">Sudah Vote</option>
                            <option value="waiting">Belum Vote</option>
                        </select>
                    </div>
                    <div class="student-list" id="student-status-list">
                        <!-- Student status list will be populated here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // User data storage - only guru and siswa are pre-registered
        const users = [
            { username: 'guru', password: 'guru123', role: 'teacher' },
            { username: 'siswa', password: 'siswa123', role: 'student', online: false, voted: false }
        ];
        
        // Mood data storage - initially empty
        let moodData = {
            happy: [],
            sad: [],
            neutral: [],
            calm: [],
            worried: [],
            excited: []
        };
        
        // DOM elements
        const screens = {
            login: document.getElementById('login-screen'),
            signup: document.getElementById('signup-screen'),
            student: document.getElementById('student-screen'),
            teacher: document.getElementById('teacher-screen')
        };
        
        // Current user
        let currentUser = null;
        let selectedMood = null;
        
        // Show screen function
        function showScreen(screenId) {
            Object.values(screens).forEach(screen => {
                screen.classList.remove('active');
            });
            screens[screenId].classList.add('active');
        }
        
        // Navigation between login and signup
        document.getElementById('show-signup').addEventListener('click', (e) => {
            e.preventDefault();
            showScreen('signup');
        });
        
        document.getElementById('show-login').addEventListener('click', (e) => {
            e.preventDefault();
            showScreen('login');
        });
        
        // Login functionality
        document.getElementById('login-btn').addEventListener('click', () => {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            
            const user = users.find(u => u.username === username && u.password === password);
            
            if (user) {
                currentUser = user;
                // Set user as online
                user.online = true;
                
                if (user.role === 'student') {
                    document.getElementById('student-username').textContent = user.username;
                    showScreen('student');
                } else {
                    document.getElementById('teacher-username').textContent = user.username;
                    initTeacherDashboard();
                    showScreen('teacher');
                }
            } else {
                alert('Username atau password salah!');
            }
        });
        
        // Signup functionality
        document.getElementById('signup-btn').addEventListener('click', () => {
            const username = document.getElementById('new-username').value;
            const password = document.getElementById('new-password').value;
            const role = document.querySelector('input[name="role"]:checked').value;
            
            if (!username || !password) {
                alert('Username dan password harus diisi!');
                return;
            }
            
            if (users.some(u => u.username === username)) {
                alert('Username sudah digunakan!');
                return;
            }
            
            const newUser = { 
                username, 
                password, 
                role,
                online: true,
                voted: false
            };
            users.push(newUser);
            currentUser = newUser;
            
            if (role === 'student') {
                document.getElementById('student-username').textContent = username;
                showScreen('student');
            } else {
                document.getElementById('teacher-username').textContent = username;
                initTeacherDashboard();
                showScreen('teacher');
            }
        });
        
        // Logout functionality
        document.getElementById('student-logout').addEventListener('click', () => {
            if (currentUser) {
                currentUser.online = false;
                
                // If they had voted, remove their vote
                if (currentUser.voted) {
                    Object.keys(moodData).forEach(mood => {
                        const index = moodData[mood].indexOf(currentUser.username);
                        if (index > -1) {
                            moodData[mood].splice(index, 1);
                        }
                    });
                    currentUser.voted = false;
                }
            }
            currentUser = null;
            showScreen('login');
        });
        
        document.getElementById('teacher-logout').addEventListener('click', () => {
            if (currentUser) {
                currentUser.online = false;
            }
            currentUser = null;
            showScreen('login');
        });
        
        // Student mood selection
        const moodButtons = document.querySelectorAll('.mood-btn');
        moodButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                moodButtons.forEach(b => b.classList.remove('selected'));
                btn.classList.add('selected');
                selectedMood = btn.dataset.mood;
                document.getElementById('submit-mood').removeAttribute('disabled');
            });
        });
        
        // Submit mood
        document.getElementById('submit-mood').addEventListener('click', () => {
            if (!selectedMood) return;
            
            const suggestion = document.getElementById('suggestion').value;
            
            // Add user to mood data
            Object.keys(moodData).forEach(mood => {
                const index = moodData[mood].indexOf(currentUser.username);
                if (index > -1) {
                    moodData[mood].splice(index, 1);
                }
            });
            
            if (!moodData[selectedMood]) {
                moodData[selectedMood] = [];
            }
            moodData[selectedMood].push(currentUser.username);
            
            // Mark user as voted
            currentUser.voted = true;
            
            // Show success message
            document.getElementById('submission-success').classList.remove('hidden');
            
            // Reset form
            moodButtons.forEach(b => b.classList.remove('selected'));
            document.getElementById('suggestion').value = '';
            document.getElementById('submit-mood').setAttribute('disabled', 'true');
            selectedMood = null;
            
            // Hide success message after 3 seconds
            setTimeout(() => {
                document.getElementById('submission-success').classList.add('hidden');
            }, 3000);
            
            // Update teacher dashboard if teacher is logged in
            const teacherUser = users.find(u => u.role === 'teacher' && u.online);
            if (teacherUser) {
                updateTeacherDashboard();
            }
        });
        
        // Initialize teacher dashboard
        function initTeacherDashboard() {
            updateTeacherDashboard();
            
            // Set up interval to refresh the dashboard
            setInterval(updateTeacherDashboard, 5000);
        }
        
        // Update teacher dashboard
        function updateTeacherDashboard() {
            // Update mood counts
            updateMoodCounts();
            
            // Check for negative mood alert
            checkNegativeMoodAlert();
            
            // Update student status list
            updateStudentStatusList();
            
            // Update voting progress
            updateVotingProgress();
        }
        
        // Update mood counts in teacher dashboard
        function updateMoodCounts() {
            document.getElementById('happy-count').textContent = `${moodData.happy ? moodData.happy.length : 0} siswa`;
            document.getElementById('sad-count').textContent = `${moodData.sad ? moodData.sad.length : 0} siswa`;
            document.getElementById('neutral-count').textContent = `${moodData.neutral ? moodData.neutral.length : 0} siswa`;
            document.getElementById('calm-count').textContent = `${moodData.calm ? moodData.calm.length : 0} siswa`;
            document.getElementById('worried-count').textContent = `${moodData.worried ? moodData.worried.length : 0} siswa`;
            document.getElementById('excited-count').textContent = `${moodData.excited ? moodData.excited.length : 0} siswa`;
        }
        
        // Check for negative mood alert
        function checkNegativeMoodAlert() {
            const totalStudents = Object.values(moodData).flat().length;
            const negativeMoods = [...(moodData.sad || []), ...(moodData.worried || [])];
            const negativePercentage = totalStudents > 0 ? (negativeMoods.length / totalStudents) * 100 : 0;
            
            if (negativePercentage > 30) {
                document.getElementById('alert-banner').classList.remove('hidden');
            } else {
                document.getElementById('alert-banner').classList.add('hidden');
            }
        }
        
        // Update student status list
        function updateStudentStatusList() {
            const studentList = document.getElementById('student-status-list');
            const filter = document.getElementById('student-filter').value;
            
            // Clear current list
            studentList.innerHTML = '';
            
            // Get all students who have registered (only those in the users array)
            const students = users.filter(user => user.role === 'student');
            
            // Filter students based on selection
            let filteredStudents = students;
            if (filter === 'online') {
                filteredStudents = students.filter(student => student.online);
            } else if (filter === 'voted') {
                filteredStudents = students.filter(student => student.voted);
            } else if (filter === 'waiting') {
                filteredStudents = students.filter(student => student.online && !student.voted);
            }
            
            // Show empty state if no students match the filter
            if (filteredStudents.length === 0) {
                const emptyState = document.createElement('div');
                emptyState.className = 'empty-state';
                
                let message = '';
                switch(filter) {
                    case 'all':
                        message = 'Belum ada siswa yang terdaftar';
                        break;
                    case 'online':
                        message = 'Belum ada siswa yang online';
                        break;
                    case 'voted':
                        message = 'Belum ada siswa yang vote';
                        break;
                    case 'waiting':
                        message = 'Tidak ada siswa yang menunggu vote';
                        break;
                }
                
                emptyState.textContent = message;
                studentList.appendChild(emptyState);
                return;
            }
            
            // Create student status items
            filteredStudents.forEach(student => {
                const studentItem = document.createElement('div');
                studentItem.className = 'p-2 border-b flex items-center justify-between';
                
                // Find student's mood if they voted
                let moodEmoji = '';
                if (student.voted) {
                    for (const [mood, users] of Object.entries(moodData)) {
                        if (users.includes(student.username)) {
                            switch (mood) {
                                case 'happy': moodEmoji = '😊'; break;
                                case 'sad': moodEmoji = '😢'; break;
                                case 'neutral': moodEmoji = '😐'; break;
                                case 'calm': moodEmoji = '😌'; break;
                                case 'worried': moodEmoji = '😟'; break;
                                case 'excited': moodEmoji = '🤩'; break;
                            }
                            break;
                        }
                    }
                }
                
                const nameWithMood = student.voted 
                    ? `<span class="text-xl mr-2">${moodEmoji}</span><span>${student.username}</span>`
                    : `<span>${student.username}</span>`;
                
                const statusBadge = student.online 
                    ? (student.voted 
                        ? '<span class="badge badge-voted">Sudah Vote</span>' 
                        : '<span class="badge badge-waiting">Belum Vote</span>')
                    : '<span class="badge">Offline</span>';
                
                studentItem.innerHTML = `
                    <div class="flex items-center">
                        ${nameWithMood}
                    </div>
                    <div>
                        ${statusBadge}
                    </div>
                `;
                
                studentList.appendChild(studentItem);
            });
        }
        
        // Update voting progress
        function updateVotingProgress() {
            const students = users.filter(user => user.role === 'student');
            const onlineStudents = students.filter(student => student.online);
            const votedStudents = students.filter(student => student.voted);
            
            const onlineCount = onlineStudents.length;
            const votedCount = votedStudents.length;
            const percentage = onlineCount > 0 ? (votedCount / onlineCount) * 100 : 0;
            
            document.getElementById('online-count').textContent = onlineCount;
            document.getElementById('voted-count').textContent = votedCount;
            document.getElementById('voting-progress').style.width = `${percentage}%`;
        }
        
        // Filter students by status
        document.getElementById('student-filter').addEventListener('change', () => {
            updateStudentStatusList();
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'967d9d1a9776ea85',t:'MTc1Mzk3MDMzOS4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
